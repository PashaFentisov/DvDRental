name: Build and Test Spring Boot App

on:
  pull_request:
    branches:
      - develop # adjust with the name of your target branch if it's not "main"
  push:
    branches:
      - develop, main
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven (skip tests)
        run: mvn clean install -DskipTests
  
  security:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk scan
        run: snyk test --all-projects --json > snyk-result.json
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Check for critical vulnerabilities
        run: |
          critical_count=$(jq '.vulnerabilities | map(select(.severity == "critical")) | length' snyk-result.json)
          if [ "$critical_count" -gt "0" ]; then
            echo "Critical vulnerabilities found: $critical_count"
            exit 1
          else
            echo "No critical vulnerabilities found."
          fi

  test:
    needs: build
    runs-on: ubuntu-latest
    # Define the PostgreSQL service for the build job
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: dvdrental
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run tests
        run: mvn test
        